# Copyright: (c) 2023, dbi services, distributed without any warranty under the terms of the GNU General Public License v3
---
- include_tasks: derive_volumes_need.yml
- include_tasks: define_linux_variable.yml

- name: Get the list of existing instances
  delegate_to: localhost
  community.aws.ec2_instance_info:
    region: "{{ region_id }}"
    filters:
      "tag:Name": "{{ machine_name }}"
      instance-state-name: [ "pending", "running", "shutting-down", "stopping", "stopped" ]
  register: r_ec2_instance_info
  failed_when: r_ec2_instance_info.instances|length != 1

- debug: var=r_ec2_instance_info
  delegate_to: localhost
  when: debug | bool

- name: Generate EC2 volumes variable for Linux
  delegate_to: localhost
  set_fact:
    ec2_volume:
      region: "{{ region_id }}"
      instance: "{{ r_ec2_instance_info.instances[0].instance_id }}"
      volume_size: "{{ role_storage_devices.aws_component_disk_parameters.max_size_gb }}"
      volume_type: "{{ role_storage_devices.aws_component_disk_parameters.volume_type }}"
      device_name: "/dev/sd{{ allowed_device_alphabet_letter[item|int-1:item|int] }}"
      encrypted: "{{ role_storage_devices.aws_component_disk_parameters.encrypted }}"
      delete_on_termination: "{{ role_storage_devices.aws_component_disk_parameters.delete_on_termination }}"
      tags: "{{ {'Name': 'disk'+item} | combine(custom_tags) }}"
  register: r_ec2_volumes
  loop: "{{ query('sequence', 'start=1 end='+(number_of_devices)|string) }}"

- debug: var=r_ec2_volumes
  delegate_to: localhost
  when: debug | bool

- name: Create and attach the volumes to instance
  delegate_to: localhost
  amazon.aws.ec2_vol: "{{ item.ansible_facts.ec2_volume }}"
  loop: "{{ r_ec2_volumes.results }}"
